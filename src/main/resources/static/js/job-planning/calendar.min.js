"use strict";let isUpdate;let idUpdate;let eventUpdate;let jobUpdate;let plannerUpdate;let assigneeUpdate;$(document).ready(function(){$("#calendar").fullCalendar({timeFormat:"HH:mm",events:"/nera/job-planning/api/get-source-calendar-view",customButtons:{add:{text:""},pending:{text:"Pending for Acceptance"},accept:{text:"Accepted"},reject:{text:"Rejected"},executing:{text:"Executing"},finishedapprove:{text:"Finished(A)"},finishedreject:{text:"Finished(R)"},finishFailed:{text:"Finished(F)"},finishStopped:{text:"Finished(S)"}},editable:true,header:{left:"prev,next today, pending, accept, reject, executing, finishedapprove, finishedreject, finishStopped, finishFailed",center:"title",right:"add"},selectable:true,selectHelper:true,dayClick:function(){openAddEvent()},eventClick:function(b,a){openUpdateEvent(b.id);eventUpdate=a},allDay:true});renderNoteAndButtonAdd();$("#selectJobId").change(function(){let val=$("#selectJobId option:selected").val();if(val!==undefined){getJobById(val)}});loadDateTimeTicker();$("#btnDetailDelete").on("click",function(){$("#kt_modal_edit").modal("toggle");$("#kt_modal_Delete").modal("show");$("#deleteId").val(idUpdate)});$("#btnYesDelete").on("click",function(){let id=$("#deleteId").val();callDeleteApi(id)});let timePicker=new TimePicker(["startTime","endTime"],{lang:"en"});timePicker.on("change",function(a){a.element.value=(a.hour||"00")+":"+(a.minute||"00");if(a.element.id==="startTime"){let end;if(parseInt(a.hour)*60+parseInt(a.minute||0)+120>1440){end="24:00"}else{end=(parseInt(a.hour)+2||"00")+":"+(a.minute||"00")}$("#endTime").val(end)}else{let minute=(a.minute||"00");if((getHour($("#startTime").val())===parseInt(a.hour)&&getMinute($("#startTime").val())>=parseInt(minute))||getHour($("#startTime").val())>parseInt(a.hour)){$("#lblError").text("The end time must be greater than the start time.");$("#validateData").removeClass("hide-class")}else{$("#validateData").addClass("hide-class")}}});$("._jw-tpk-container").css("height","auto");$("#btnConfirm").on("click",function(){if(isUpdate){updateJobCalendarEvent(idUpdate)}else{addJobCalendarEvent()}});$("#loader").hide()});function renderNoteAndButtonAdd(){$(".fc-pending-button, .fc-accept-button, .fc-reject-button,.fc-executing-button,.fc-finishedapprove-button,.fc-finishedreject-button,.fc-finishStopped-button,.fc-finishFailed-button").css("color","#FFFFFF");$(".fc-pending-button, .fc-accept-button, .fc-reject-button,.fc-executing-button,.fc-finishedapprove-button,.fc-finishedreject-button,.fc-finishStopped-button,.fc-finishFailed-button").prop("disabled",true);$(".fc-pending-button").css("background","#2E64FE");$(".fc-accept-button").css("background","#088A4B");$(".fc-reject-button").css("background","#DF0101");$(".fc-executing-button").css("background","#dfb24a");$(".fc-finishedapprove-button").css("background","#4fdfc3");$(".fc-finishedreject-button").css("background","#afdfd3");$(".fc-finishStopped-button").css("background","#949483");$(".fc-finishFailed-button").css("background","#131215");if(hasAssignJobPermission){$(".fc-add-button").replaceWith("<button onclick='openAddEvent()' class='btn btn-add-default btn-icon-sm'><span><i class='la la-plus' style='color: white; font-weight: bolder'></i></span> <span>Assign New Job</span></button>")}else{$(".fc-add-button").replaceWith("")}$(".btn-add-default").css("height","3.1em")}function getHour(a){return parseInt(a.split(":")[0])}function getLengthHour(a){return a.split(":")[0].length}function getMinute(a){return parseInt(a.split(":")[1])}function callDeleteApi(a){$.ajax({type:"POST",url:"/nera/job-planning/api/delete-job-by-id",data:{id:a},beforeSend:function(){},success:function(){$("#kt_modal_Delete").modal("hide");$("#calendar").fullCalendar("removeEvents");Swal.fire({text:"Successfully",type:"success",timer:2000,showConfirmButton:false})},error:function(){Swal.fire({text:"Failed",type:"error",timer:2000,showConfirmButton:false})}})}function loadDateTimeTicker(){$(".m_datepicker").datepicker({format:"dd/mm/yyyy",todayBtn:"linked",clearBtn:true,todayHighlight:true,templates:{leftArrow:'<i class="la la-angle-left"></i>',rightArrow:'<i class="la la-angle-right"></i>'}})}function getJobById(a){$.ajax({type:"GET",url:"/nera/job-planning/api/get-job-view-by-id?id="+a,success:function(b){if(b.id!==0){if(b.workflowName===null){$("#lblError").text("Job must be at least 1 Workflow, please choose another Job.");$("#validateData").removeClass("hide-class");$("#descriptionJob").text("");$("#workflowName").text("")}else{$("#validateData").addClass("hide-class");$("#descriptionJob").text(b.description);$("#workflowName").text(b.workflowName);getImageWorkflow(b.workflowName)}}else{$("#descriptionJob").text("");$("#workflowName").text("")}}})}function getImageWorkflow(a){$(".contentWorkflowDetail").empty();$.ajax({type:"GET",url:"/nera/api/get-image-workflow-by-name",data:{name:a},success:function(b){if(b!=""){$(".contentWorkflowDetail").append("");$(".contentWorkflowDetail").append('<img width="90%" height="88%" src="data:image/png;base64, '+b+'">')}}})}function CreateOrUpdate(){if($("#selectJobId option:selected").val()==null||$("#workflowName").text()===""||$("#assigneeSelect option:selected").val()==null||$("#plannerSelect option:selected").val()==null||$("#DateExec").val()===""||$("#startTime").val()===""||$("#endTime").val()===""){$("#lblError").text("Field contain (*) cannot empty, please type again");$("#validateData").removeClass("hide-class")}else{if(getHour($("#startTime").val())===getHour($("#endTime").val())&&getMinute($("#startTime").val())>=getMinute($("#endTime").val())||getHour($("#startTime").val())>getHour($("#endTime").val())){$("#lblError").text("The end time must be greater than the start time.");$("#validateData").removeClass("hide-class")}else{$("#validateData").addClass("hide-class");showConfirmPopup()}}}function showConfirmPopup(){if(isUpdate){$("#txtConfirm").text("Are you sure you want to update a job assignment?")}else{$("#txtConfirm").text("Are you sure you want to create a new job assignment?")}$("#kt_modal_confirm").modal("show")}function validateHour(a){if(getLengthHour(a)<2){return"0"+a}return a}function addJobCalendarEvent(){let body={plannerId:$("#plannerSelect option:selected").val(),assigneeId:$("#assigneeSelect option:selected").val(),jobId:$("#selectJobId option:selected").val(),startTime:validateHour($("#startTime").val()),endTime:validateHour($("#endTime").val()),executionDate:$("#DateExec").val(),jobDescription:$("#descriptionJob").text()};$.ajax({type:"POST",url:"/nera/job-planning/api/create-job-planning",data:JSON.stringify(body),contentType:"application/json",beforeSend:function(){$("#kt_modal_confirm").modal("toggle");$("#loader").show()},complete:function(){$("#loader").hide()},success:function(a){let end;let start;if(a.code!==200){$("#kt_modal_edit").modal("toggle");Swal.fire({text:"Failed",type:"error",timer:2000,showConfirmButton:false})}else{$("#kt_modal_edit").modal("toggle");start=setDate($("#DateExec").val(),$("#startTime").val());end=setDate($("#DateExec").val(),$("#endTime").val());let eventObject={title:a.fieldName,start:start,end:end,textColor:"white",id:a.id,color:"#2E64FE"};Swal.fire({text:"Successfully",type:"success",timer:2000,showConfirmButton:false});$("#calendar").fullCalendar("renderEvent",eventObject,true)}}})}function updateJobCalendarEvent(a){let body={id:a,plannerId:$("#plannerSelect option:selected").val(),assigneeId:$("#assigneeSelect option:selected").val(),jobId:$("#selectJobId option:selected").val(),startTime:validateHour($("#startTime").val()),endTime:validateHour($("#endTime").val()),executionDate:$("#DateExec").val()};$.ajax({type:"POST",url:"/nera/job-planning/api/update-job-planning",data:JSON.stringify(body),contentType:"application/json",beforeSend:function(){$("#kt_modal_confirm").modal("toggle");$("#loader").show()},complete:function(){$("#loader").hide()},success:function(b){let end;let start;if(b.code!==200){$("#kt_modal_edit").modal("toggle");Swal.fire({text:"Failed",type:"error",timer:2000,showConfirmButton:false})}else{$("#kt_modal_edit").modal("toggle");start=setDate($("#DateExec").val(),$("#startTime").val());end=setDate($("#DateExec").val(),$("#endTime").val());eventUpdate.title=$("#selectJobId option:selected").text();eventUpdate.start=start;eventUpdate.end=end;eventUpdate.id=idUpdate;Swal.fire({text:"Successfully",type:"success",timer:2000,showConfirmButton:false});$("#calendar").fullCalendar("refetchEvents")}}})}function autoCreateDateJob(){let date=new Date();date.setDate(new Date().getDate()+3);return moment(date).format("DD/MM/YYYY")}function openAddEvent(){$(".contentWorkflowDetail").empty();isUpdate=false;if(hasAssignJobPermission){$("#validateData").addClass("hide-class");$(".select2-selection__rendered").html("");$("#DateExec").val(autoCreateDateJob());$("#startTime").val("8:00");$("#endTime").val("10:00");$("#descriptionJob").text("");$("#workflowName").text("");$("#jobAssignStatus").text("");loadPlanner();loadAssignee();loadJob();$("#kt_modal_edit").modal("show")}else{Swal.fire({text:"Don't have permission to assign job",type:"error",timer:2000,showConfirmButton:false})}}function openUpdateEvent(a){isUpdate=true;idUpdate=a;$.ajax({type:"GET",url:"/nera/job-planning/api/get-job-by-id?id="+a,success:function(b){plannerUpdate=b.plannerId;jobUpdate=b.jobId;assigneeUpdate=b.assigneeId;if(b.status==="Accepted"){$("#job_description").text(b.jobDescription);$("#workflow_name").text(b.workflowName);$("#job_assign_status").text(b.status);$("#date_exec").text(b.executionDate);$("#time_exec").text(b.startTime+" - "+b.endTime);$("#planner_name").text(b.plannerName);$("#assignee_name").text(b.assigneeName);$("#job_name").text(b.jobName);getImageWorkflow(b.workflowName);$("#kt_modal_view").modal("show")}else{$("#validateData").addClass("hide-class");$("#DateExec").val(b.executionDate);$("#startTime").val(b.startTime);$("#endTime").val(b.endTime);$("#descriptionJob").text(b.jobDescription);$("#workflowName").text(b.workflowName);$("#jobAssignStatus").text(b.status);getImageWorkflow(b.workflowName);loadPlanner();loadAssignee();loadJob();$("#kt_modal_edit").modal("show")}}})}function loadJob(){$("#selectJobId").find("option").remove().end();$.ajax({type:"GET",url:"/nera/job-planning/api/get-job-management",success:function(a){let re=a;for(let i=0;i<re.length;i++){let op=new Option(re[i].name,re[i].id);$("#selectJobId").append(op)}if(isUpdate){$("#selectJobId").val(jobUpdate).trigger("change")}else{$("#selectJobId").val(null).trigger("change")}$("#selectJobId").select2({placeholder:"Select Job",allowClear:false,width:"resolve",dropdownAutoWidth:true})}})}function loadPlannerDefault(){$.ajax({type:"GET",url:"/nera/my-job/api/get-user-default",success:function(a){$("#plannerSelect").val(a.id).trigger("change")}})}function loadPlanner(){$("#plannerSelect").find("option").remove().end();$.ajax({type:"GET",url:"/nera/job-planning/api/get-planner",success:function(a){let re=a;for(let i=0;i<re.length;i++){let op=new Option(re[i].fullName,re[i].id);$("#plannerSelect").append(op)}if(isUpdate){$("#plannerSelect").val(plannerUpdate).trigger("change")}else{loadPlannerDefault()}$("#plannerSelect").select2({placeholder:"Select Planner",allowClear:false,width:"resolve",dropdownAutoWidth:true})}})}function loadAssignee(){$("#assigneeSelect").find("option").remove().end();$.ajax({type:"GET",url:"/nera/job-planning/api/get-assignee",success:function(a){let re=a;for(let i=0;i<re.length;i++){let op=new Option(re[i].fullName,re[i].id);$("#assigneeSelect").append(op)}if(isUpdate){$("#assigneeSelect").val(assigneeUpdate).trigger("change")}else{$("#assigneeSelect").val(null).trigger("change")}$("#assigneeSelect").select2({placeholder:"Select Assignee",allowClear:false,width:"resolve",dropdownAutoWidth:true})}})}function setDate(a,b){let date=a.split("/").reverse().join("/");let result=new Date(date);result.setHours(b.split(":")[0],b.split(":")[1],0,0);return moment(result).format("YYYY/MM/DD HH:mm")}function validateExecutionDate(a){let dateE=stringToDate(a,"dd/MM/yyyy","/");let dateNow=new Date();dateNow.setDate(dateNow.getDate()+2);return dateE>=dateNow}function stringToDate(b,a,c){let formatLowerCase=a.toLowerCase();let formatItems=formatLowerCase.split(c);let dateItems=b.split(c);let monthIndex=formatItems.indexOf("mm");let dayIndex=formatItems.indexOf("dd");let yearIndex=formatItems.indexOf("yyyy");let month=parseInt(dateItems[monthIndex]);month-=1;return new Date(dateItems[yearIndex],month,dateItems[dayIndex])};